name: Build

on:
  push:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy: 
      matrix:
        os: [ubuntu-latest, windows-latest]

    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.os }}
      cancel-in-progress: true

    steps:

    # Checkout repo

    - uses: actions/checkout@v3

    # Install required packages

    - name: Install required packages (Linux only)
      run: sudo sh setup.sh
      if: runner.os == 'Linux'
    
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true
        override: true
    
    - uses: Swatinem/rust-cache@v1

    # Build yarge-frontend-desktop

    - name: Build
      run: cargo build -p yarge-frontend-desktop --profile production
    
    # Create yarge-frontend-desktop deb

    - name: Create a binary .deb package for yarge-frontend-desktop (Linux only)
      if: runner.os == 'Linux'
      run: cargo install cargo-deb; cargo deb -p yarge-frontend-desktop --strip --no-build --profile production --output "./yarge-frontend-desktop.deb"

    # Upload build artifacts

    - name: Upload Windows build artifact
      uses: actions/upload-artifact@v3
      if: runner.os == 'Windows'
      with:
        name: release-win64
        path: ./target/production/yarge-frontend-desktop.exe
    
    - name: Upload Linux build artifact
      uses: actions/upload-artifact@v3
      if: runner.os == 'Linux'
      with:
        name: release-lin64
        path: ./target/production/yarge-frontend-desktop
    
    - name: Upload yarge-frontend-desktop Debian package
      uses: actions/upload-artifact@v3
      if: runner.os == 'Linux'
      with:
        name: release-lin64-deb
        path: ./yarge-frontend-desktop.deb

    # Build yarge-frontend-nano
    
    - name: Build yarge-frontend-nano
      run: cargo build -p yarge-frontend-nano --profile production

    - name: Upload Nano Windows build artifact
      uses: actions/upload-artifact@v3
      if: runner.os == 'Windows'
      with:
        name: nano-release-win64
        path: ./target/production/yarge-frontend-nano.exe
    
    - name: Upload Nano Linux build artifact
      uses: actions/upload-artifact@v3
      if: runner.os == 'Linux'
      with:
        name: nano-release-lin64
        path: ./target/production/yarge-frontend-nano
