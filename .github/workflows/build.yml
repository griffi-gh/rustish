name: Build

on:
  push:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:

    # Checkout repo

    - uses: actions/checkout@v3

    # Install required packages

    - name: Install required packages (Linux only)
      run: sudo apt update; sudo apt install libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev libatk1.0-dev gir1.2-gtk-3.0 dpkg-dev liblzma-dev
      if: runner.os == 'Linux'
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true
        override: true
    - uses: Swatinem/rust-cache@v1

    # Build

    - name: Build
      run: cargo build -p yarge-frontend-desktop --release

    # Run tests
    # - name: Run tests
    #   run: cargo test -p yarge-core --features breakpoints
    
    # Create deb

    - name: Create a binary .deb package (Linux only)
      if: runner.os == 'Linux'
      run: cargo install cargo-deb; cargo deb -p yarge-frontend-desktop --strip --no-build --output "./yarge-frontend-desktop.deb"

    # Upload build artifacts

    - name: Upload build artifact (Windows only)
      uses: actions/upload-artifact@v3
      if: runner.os == 'Windows'
      with:
        name: release-win64
        path: ./target/release/yarge-frontend-desktop.exe
    
    - name: Upload build artifact (Linux only)
      uses: actions/upload-artifact@v3
      if: runner.os == 'Linux'
      with:
        name: release-lin64
        path: ./target/release/yarge-frontend-desktop
    
    - name: Upload .deb (Linux only)
      uses: actions/upload-artifact@v3
      if: runner.os == 'Linux'
      with:
        name: release-lin64-deb
        path: ./yarge-frontend-desktop.deb
